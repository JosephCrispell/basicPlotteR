}
return(breaks)
}
createHistogramObjects <- function(distributions, breaks, freq){
# Create a list to store the histograms
output <- list()
# Create a histogram for each distribution
index <- 0
for(distribution in distributions){
index <- index + 1
output[[index]] <- hist(distribution, breaks=breaks, plot=FALSE, freq=freq)
}
return(output)
}
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Define the y axis limits
yLimits <- c(0, max(counts))
return(yLimits)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotOverlappingHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks, freq)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
createHistogramObjects <- function(distributions, breaks){
# Create a list to store the histograms
output <- list()
# Create a histogram for each distribution
index <- 0
for(distribution in distributions){
index <- index + 1
output[[index]] <- hist(distribution, breaks=breaks, plot=FALSE)
}
return(output)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotOverlappingHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotOverlappingHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, xpd=TRUE, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq, xpd=TRUE)
}
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(50, mean=5), rnorm(50, mean=8), rnorm(50, mean=15))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(50, mean=5), rnorm(50, mean=8), rnorm(50, mean=15))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
nBins=20
colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5))
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
yLimtis
yLimits
histograms[[1]]$counts
histograms[[2]]$counts
histograms[[3]]$counts
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Get the maximum count
maxCount <- max(counts)
# Set the yLimits
yLimits <- c(0, maxCounts + (0.05*maxCounts))
return(yLimits)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Get the maximum count
maxCount <- max(counts)
# Set the yLimits
yLimits <- c(0, maxCount + (0.05*maxCount))
return(yLimits)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5), rnorm(500, mean=8), rnorm(500, mean=15))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Get the maximum count
maxCount <- max(counts)
# Set the yLimits
yLimits <- c(0, maxCount + (0.1*maxCount))
return(yLimits)
}
plotOverlappingHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Get the maximum count
maxCount <- max(counts)
# Set the yLimits
yLimits <- c(0, maxCount + (0.5*maxCount))
return(yLimits)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotOverlappingHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ylim=yLimits, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Set the yLimits
yLimits <- c(0, max(counts))
return(yLimits)
}
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5), rnorm(500, mean=8), rnorm(500, mean=20))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5), rnorm(500, mean=8, sd=5), rnorm(500, mean=20, sd=15))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5), rnorm(500, mean=8, sd=5), rnorm(500, mean=20, sd=1))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5), rnorm(500, mean=8, sd=5), rnorm(500, mean=20, sd=5))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5), rnorm(500, mean=8, sd=5), rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotOverlappingHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
list <- list()
length(list)
plotMultipleHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ylim=yLimits, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
defineBreaks <- function(xLimits, nBins){
# Define the breaks using a sequence of numbers from the minimum x axis limit to the maximum
breaks <- seq(from=xLimits[1], to=xLimits[2] + 1, by=(xLimits[2] - xLimits[1])/nBins)
# Check that breaks includes last
if(xLimits[2] %in% breaks == FALSE){
breaks[length(breaks) + 1] <- xLimits[2]
}
return(breaks)
}
createHistogramObjects <- function(distributions, breaks){
# Create a list to store the histograms
output <- list()
# Create a histogram for each distribution
for(distribution in distributions){
output[[length(output) + 1]] <- hist(distribution, breaks=breaks, plot=FALSE)
}
return(output)
}
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Set the yLimits
yLimits <- c(0, max(counts))
return(yLimits)
}
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5), rnorm(500, mean=8, sd=5), rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotMultipleHistograms <- function(distributions, nBins=10, colours, freq=TRUE, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], freq=freq, ylim=yLimits, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE, freq=freq)
}
}
defineBreaks <- function(xLimits, nBins){
# Define the breaks using a sequence of numbers from the minimum x axis limit to the maximum
breaks <- seq(from=xLimits[1], to=xLimits[2], by=(xLimits[2] - xLimits[1])/nBins)
# Check that breaks includes last
if(xLimits[2] %in% breaks == FALSE){
breaks[length(breaks) + 1] <- xLimits[2]
}
return(breaks)
}
createHistogramObjects <- function(distributions, breaks){
# Create a list to store the histograms
output <- list()
# Create a histogram for each distribution
for(distribution in distributions){
output[[length(output) + 1]] <- hist(distribution, breaks=breaks, plot=FALSE)
}
return(output)
}
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Set the yLimits
yLimits <- c(0, max(counts))
return(yLimits)
}
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
defineBreaks <- function(xLimits, nBins){
# Define the bin size based upon the number of bins required
binSize <- (xLimits[2] - xLimits[1])/nBins
# Define the breaks using a sequence of numbers from the minimum x axis limit to the maximum
breaks <- seq(from=xLimits[1], to=xLimits[2], by=binSize)
# Check that breaks includes last
if(xLimits[2] %in% breaks == FALSE){
breaks[length(breaks) + 1] <- breaks[length(breaks)] + binSize
}
return(breaks)
}
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
plotMultipleHistograms <- function(distributions, nBins=10, colours, ...){
# Calculate the limits of the X axis
xLimits <- range(unlist(distributions))
# Define the bins for the histogram
breaks <- defineBreaks(xLimits, nBins)
# Create a histogram object for each distribution
histograms <- createHistogramObjects(distributions, breaks)
# Calculate the y axis limits
yLimits <- calculateYAxisLimits(histograms)
# Plot the histograms
plot(histograms[[1]], col=colours[1], ylim=yLimits, ...)
for(i in 2:length(histograms)){
plot(histograms[[i]], col=colours[i], add=TRUE)
}
}
defineBreaks <- function(xLimits, nBins){
# Define the bin size based upon the number of bins required
binSize <- (xLimits[2] - xLimits[1])/nBins
# Define the breaks using a sequence of numbers from the minimum x axis limit to the maximum
breaks <- seq(from=xLimits[1], to=xLimits[2], by=binSize)
# Check that breaks includes last
if(xLimits[2] %in% breaks == FALSE){
breaks[length(breaks) + 1] <- breaks[length(breaks)] + binSize
}
return(breaks)
}
createHistogramObjects <- function(distributions, breaks){
# Create a list to store the histograms
output <- list()
# Create a histogram for each distribution
for(distribution in distributions){
output[[length(output) + 1]] <- hist(distribution, breaks=breaks, plot=FALSE)
}
return(output)
}
calculateYAxisLimits <- function(histograms){
# Initialise a vector to store the bin counts from each histogram
counts <- c()
# Find the maximum height of bats in the histogram
for(histogram in histograms){
counts <- c(counts, histogram$counts)
}
# Set the yLimits
yLimits <- c(0, max(counts))
return(yLimits)
}
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
?plot
packageDirectory <- "/home/josephcrispell/Desktop/Research/plotteR/"
create(packageDirectory)
library("devtools")
library("roxygen2")
packageDirectory <- "/home/josephcrispell/Desktop/Research/plotteR/"
create(packageDirectory)
usethis::create_package(packageDirectory)
setwd(packageDirectory)
document()
packageDirectory <- "/home/josephcrispell/Desktop/Research/plotteR/"
setwd(packageDirectory)
document()
# Set the seed
set.seed(254534)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
# Set the seed
set.seed(254534)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1)
packageDirectory <- "/home/josephcrispell/Desktop/Research/plotteR/"
setwd(packageDirectory)
document()
# Set the seed
set.seed(254534)
# Create two random samples from a normal distribution
distributions <- list(rnorm(500, mean=5, sd=0.5),
rnorm(500, mean=8, sd=5),
rnorm(500, mean=20, sd=2))
# Plot overlapping histograms
plotMultipleHistograms(distributions, nBins=20, colours=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5), rgb(0,1,0, 0.5)), las=1, main="Samples from normal distrituions", xlab="Values")
source('~/.active-rstudio-document')
