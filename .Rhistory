if(length(lwd) == length(xCoords)){
lwd = lwd[-indicesOfNAs]
}
if(length(bg) == length(xCoords)){
bg = bg[-indicesOfNAs]
}
if(length(cex) == length(xCoords)){
cex = cex[-indicesOfNAs]
}
# Remove the NA coordinates
xCoords <- xCoords[-indicesOfNAs]
yCoords <- yCoords[-indicesOfNAs]
}
############################
# Check if axes are logged #
############################
# Check X axis
xAxisLogged <- FALSE
if(par("xlog")){
# Note that X axis was logged
xAxisLogged <- TRUE
# Log the X coordinates
xCoords <- log10(xCoords)
# Reset the X axis logged flag - fools points and polygon commands below
par(xlog=FALSE)
}
# Check Y axis
yAxisLogged <- FALSE
if(par("ylog")){
# Note that Y axis was logged
yAxisLogged <- TRUE
# Log the Y coordinates
yCoords <- log10(yCoords)
# Reset the Y axis logged flag - fools points and polygon commands below
par(ylog=FALSE)
}
###############################
# Store the point information #
###############################
# Calculate the height and width of point on current plot
pointSize <- calculatePointSize(axisLimits, sizeFactor=avoidFactor)
# Note the cex to be applied to each point
if(length(cex) != length(xCoords)){
cex <- rep(cex, ceiling(length(xCoords)/length(cex)))[1:length(xCoords)]
}
# Store the input coordinates and labels
# !Note need to make addTextLabels have multiple cex values!
pointInfo <- list("X"=xCoords, "Y"=yCoords, "N"=length(xCoords), "Heights"=pointSize[1]*cex,
"Widths"=pointSize[2]*cex, "cex"=1)
###########################################
# Produce a list of alternative locations #
###########################################
# Generate the alternative locations
alternativeLocations <- generateAlternativeLocations(axisLimits)
# Calculate the distance between the actual and alternative points - rescale X axis remove axis range bias
distances <- euclideanDistancesWithRescaledXAxis(pointInfo, alternativeLocations, axisLimits)
###############################################################
# Create a list to store the information about plotted points #
###############################################################
# Initialise the list to store the information about plotted labels
plottedPointInfo <- list("X"=c(), "Y"=c(), "Height"=c(), "Width"=c(), "N"=0)
##############################################################
# Add labels to plot assigning new locations where necessary #
##############################################################
# Plot the point label
for(i in seq_len(pointInfo$N)){
# Set the colours for plotting - allows multiple colours and cycling through colours
colour <- setOption(options=col, index=i)
background <- setOption(options=bg, index=i)
shape <- setOption(options=pch, index=i)
size <- setOption(options=cex, index=i)
# Set the line characteristics
lineColour <- setOption(options=col.line, index=i)
lineType <- setOption(options=lty, index=i)
lineWidth <- setOption(options=lwd, index=i)
# Get the information for the current point
x <- pointInfo$X[i]
y <- pointInfo$Y[i]
height <- pointInfo$Heights[i]
width <- pointInfo$Widths[i]
# Get a new location
newLocationIndex <- chooseNewLocation(pointInfo, i, alternativeLocations, distances,
plottedPointInfo, axisLimits, keepInside)
# Is the current point too close to others?
if(alternativeLocations$N != 0 && newLocationIndex != -1 &&
(tooClose(x, y, height, width, plottedPointInfo) ||
outsidePlot(x, y, height, width, axisLimits))){
# Get the coordinates for the chosen alternate location
altX <- alternativeLocations$X[newLocationIndex]
altY <- alternativeLocations$Y[newLocationIndex]
# Add line back to previous location - from the outside of the circle
points(x=c(altX, x), y=c(altY, y), type="l", col=col.line, lty=lty, lwd=lwd, xpd=TRUE)
# Add point
points(x=altX, y=altY, pch=shape, col=colour, bg=background, cex=size)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=altX, y=altY, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
# Remove the alternative plotting location used
alternativeLocations$X <- alternativeLocations$X[-newLocationIndex]
alternativeLocations$Y <- alternativeLocations$Y[-newLocationIndex]
alternativeLocations$N <- alternativeLocations$N - 1
distances <- distances[, -newLocationIndex]
}else{
# Add point
points(x=x, y=y, pch=shape, col=colour, bg=background, cex=size)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=x, y=y, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
}
}
#####################################################################################
# Return axes logged flags to original state - for if person makes any future plots #
#####################################################################################
par(xlog=xAxisLogged)
par(ylog=yAxisLogged)
}
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=2)
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=0.5)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=0.5)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1.5)
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1)
x <- rnorm(20)
y <- rnorm(20)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1)
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1.5)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1.5)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1)
x <- rnorm(20)
y <- rnorm(20)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1)
n <- 50
coords <- data.frame(X=runif(n), Y=runif(n), Name="Test Label")
plot(x=coords$X, y=coords$Y, pch=19, bty="n", xaxt="n", yaxt="n", col=rgb(0,0,0, 0.5), xlab="X", ylab="Y")
plot(x=coords$X, y=coords$Y, pch=19, bty="n", xaxt="n", yaxt="n", cex=3, col=rgb(0,0,0, 0.5), xlab="X", ylab="Y")
plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
addPoints(coords$X, coords$Y, cex=3, col=rgb(0,0,0, 0.5))
plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
addPoints(coords$X, coords$Y, cex=3, col=rgb(0,0,0, 0.5), col.line="red", lty=2)
test
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=5)
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=5, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=5)
# Create an empty plot
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=1.5)
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
#points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=2)
plot(x=NULL, y=NULL, xlim=range(x), ylim=range(y), bty="n", yaxt="n", xaxt="n", xlab="", ylab="")
# Add overlapping points
#points(x, y, pch=19, col=rgb(0,0,0, 0.5), cex=5)
# Add non-overlapping points
addPoints(x, y, cex=2, col=rgb(0,0,0, 0.5), col.line="red", avoidFactor=5)
?plot
addPoints <- function(xCoords, yCoords, col.line="black", lty=1, lwd=1, keepInside=TRUE, cex=1, avoidFactor=1,
...){
#######################################################
# Check that the input data are in the correct format #
#######################################################
# Are each of coordinate vectors the same length?
if(length(xCoords) != length(yCoords)){
stop("addPoints() The vectors containing the X and Y coodinates must be the same length.")
}
#######################
# Get the axis limits #
#######################
# Get the axis limits
axisLimits <- par("usr")
############################
# Check for NA coordinates #
############################
# Check if any NA coordinates present
indicesOfNAs <- which(is.na(xCoords) | is.na(yCoords))
if(length(indicesOfNAs) > 0){
# Send warning
warning("NA values present in coordinates provided. These are ignored.")
# Check for each of the parameters that can have multiple parameters
if(length(col.line) == length(xCoords)){
col.line = col.line[-indicesOfNAs]
}
if(length(lty) == length(xCoords)){
lty = lty[-indicesOfNAs]
}
if(length(lwd) == length(xCoords)){
lwd = lwd[-indicesOfNAs]
}
if(length(cex) == length(xCoords)){
cex = cex[-indicesOfNAs]
}
# Remove the NA coordinates
xCoords <- xCoords[-indicesOfNAs]
yCoords <- yCoords[-indicesOfNAs]
}
############################
# Check if axes are logged #
############################
# Check X axis
xAxisLogged <- FALSE
if(par("xlog")){
# Note that X axis was logged
xAxisLogged <- TRUE
# Log the X coordinates
xCoords <- log10(xCoords)
# Reset the X axis logged flag - fools points and polygon commands below
par(xlog=FALSE)
}
# Check Y axis
yAxisLogged <- FALSE
if(par("ylog")){
# Note that Y axis was logged
yAxisLogged <- TRUE
# Log the Y coordinates
yCoords <- log10(yCoords)
# Reset the Y axis logged flag - fools points and polygon commands below
par(ylog=FALSE)
}
###############################
# Store the point information #
###############################
# Calculate the height and width of point on current plot
pointSize <- calculatePointSize(axisLimits, sizeFactor=avoidFactor)
# Note the cex to be applied to each point
if(length(cex) != length(xCoords)){
cex <- rep(cex, ceiling(length(xCoords)/length(cex)))[1:length(xCoords)]
}
# Store the input coordinates and labels
# !Note need to make addTextLabels have multiple cex values!
pointInfo <- list("X"=xCoords, "Y"=yCoords, "N"=length(xCoords), "Heights"=pointSize[1]*cex,
"Widths"=pointSize[2]*cex, "cex"=1)
###########################################
# Produce a list of alternative locations #
###########################################
# Generate the alternative locations
alternativeLocations <- generateAlternativeLocations(axisLimits)
# Calculate the distance between the actual and alternative points - rescale X axis remove axis range bias
distances <- euclideanDistancesWithRescaledXAxis(pointInfo, alternativeLocations, axisLimits)
###############################################################
# Create a list to store the information about plotted points #
###############################################################
# Initialise the list to store the information about plotted labels
plottedPointInfo <- list("X"=c(), "Y"=c(), "Height"=c(), "Width"=c(), "N"=0)
##############################################################
# Add labels to plot assigning new locations where necessary #
##############################################################
# Plot the point label
for(i in seq_len(pointInfo$N)){
# Set the line characteristics
lineColour <- setOption(options=col.line, index=i)
lineType <- setOption(options=lty, index=i)
lineWidth <- setOption(options=lwd, index=i)
# Get the information for the current point
x <- pointInfo$X[i]
y <- pointInfo$Y[i]
height <- pointInfo$Heights[i]
width <- pointInfo$Widths[i]
# Get a new location
newLocationIndex <- chooseNewLocation(pointInfo, i, alternativeLocations, distances,
plottedPointInfo, axisLimits, keepInside)
# Is the current point too close to others?
if(alternativeLocations$N != 0 && newLocationIndex != -1 &&
(tooClose(x, y, height, width, plottedPointInfo) ||
outsidePlot(x, y, height, width, axisLimits))){
# Get the coordinates for the chosen alternate location
altX <- alternativeLocations$X[newLocationIndex]
altY <- alternativeLocations$Y[newLocationIndex]
# Add line back to previous location - from the outside of the circle
points(x=c(altX, x), y=c(altY, y), type="l", col=col.line, lty=lty, lwd=lwd, xpd=TRUE)
# Add point
points(x=altX, y=altY, ...)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=altX, y=altY, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
# Remove the alternative plotting location used
alternativeLocations$X <- alternativeLocations$X[-newLocationIndex]
alternativeLocations$Y <- alternativeLocations$Y[-newLocationIndex]
alternativeLocations$N <- alternativeLocations$N - 1
distances <- distances[, -newLocationIndex]
}else{
# Add point
points(x=x, y=y, ...)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=x, y=y, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
}
}
#####################################################################################
# Return axes logged flags to original state - for if person makes any future plots #
#####################################################################################
par(xlog=xAxisLogged)
par(ylog=yAxisLogged)
}
calculatePointSize <- function(axisLimits, sizeFactor=1){
# Get the plotting window size in inches
plotSizeInches <- par()$pin # width, height
widthInches <- plotSizeInches[1]
heightInches <- plotSizeInches[2]
# Get the plotting window size in the plotting units
widthX <- axisLimits[2] - axisLimits[1]
heightY <- axisLimits[4] - axisLimits[3]
# Calculate the size of a point in the current plot
# Cex=1 is 1/72 inches (https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/pdf.html)
# Dividing by 72 is far too small - decided to choose 15?!?!
pointWidth <- (widthX / widthInches) / (15/sizeFactor)
pointHeight <- (heightY / heightInches) / (15/sizeFactor)
return(c(pointWidth, pointHeight))
}
n <- 50
coords <- data.frame(X=runif(n), Y=runif(n), Name="Test Label")
plot(x=coords$X, y=coords$Y, pch=19, bty="n", xaxt="n", yaxt="n", cex=3, col=rgb(0,0,0, 0.5), xlab="X", ylab="Y")
plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
addPoints(coords$X, coords$Y, cex=3, col=rgb(0,0,0, 0.5), col.line="red")
#' # Create some random points
#' n <- 50
#' coords <- data.frame(X=runif(n), Y=runif(n), Name="Test Label")
#'
#' # Plot points and allow overlapping
#' plot(x=coords$X, y=coords$Y, pch=19, bty="n", xaxt="n", yaxt="n", cex=3, col=rgb(0,0,0, 0.5), xlab="X", ylab="Y")
#'
#' # Plot points and avoid overlapping
#' plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
#' addPoints(coords$X, coords$Y, cex=3, col=rgb(0,0,0, 0.5), col.line="red")
addPoints <- function(xCoords, yCoords, col.line="black", lty=1, lwd=1, keepInside=TRUE, cex=1, avoidFactor=1,
...){
#######################################################
# Check that the input data are in the correct format #
#######################################################
# Are each of coordinate vectors the same length?
if(length(xCoords) != length(yCoords)){
stop("addPoints() The vectors containing the X and Y coodinates must be the same length.")
}
#######################
# Get the axis limits #
#######################
# Get the axis limits
axisLimits <- par("usr")
############################
# Check for NA coordinates #
############################
# Check if any NA coordinates present
indicesOfNAs <- which(is.na(xCoords) | is.na(yCoords))
if(length(indicesOfNAs) > 0){
# Send warning
warning("NA values present in coordinates provided. These are ignored.")
# Check for each of the parameters that can have multiple parameters
if(length(col.line) == length(xCoords)){
col.line = col.line[-indicesOfNAs]
}
if(length(lty) == length(xCoords)){
lty = lty[-indicesOfNAs]
}
if(length(lwd) == length(xCoords)){
lwd = lwd[-indicesOfNAs]
}
if(length(cex) == length(xCoords)){
cex = cex[-indicesOfNAs]
}
# Remove the NA coordinates
xCoords <- xCoords[-indicesOfNAs]
yCoords <- yCoords[-indicesOfNAs]
}
############################
# Check if axes are logged #
############################
# Check X axis
xAxisLogged <- FALSE
if(par("xlog")){
# Note that X axis was logged
xAxisLogged <- TRUE
# Log the X coordinates
xCoords <- log10(xCoords)
# Reset the X axis logged flag - fools points and polygon commands below
par(xlog=FALSE)
}
# Check Y axis
yAxisLogged <- FALSE
if(par("ylog")){
# Note that Y axis was logged
yAxisLogged <- TRUE
# Log the Y coordinates
yCoords <- log10(yCoords)
# Reset the Y axis logged flag - fools points and polygon commands below
par(ylog=FALSE)
}
###############################
# Store the point information #
###############################
# Calculate the height and width of point on current plot
pointSize <- calculatePointSize(axisLimits, sizeFactor=avoidFactor)
# Note the cex to be applied to each point
if(length(cex) != length(xCoords)){
cex <- rep(cex, ceiling(length(xCoords)/length(cex)))[1:length(xCoords)]
}
# Store the input coordinates and labels
# !Note need to make addTextLabels have multiple cex values!
pointInfo <- list("X"=xCoords, "Y"=yCoords, "N"=length(xCoords), "Heights"=pointSize[1]*cex,
"Widths"=pointSize[2]*cex, "cex"=1)
###########################################
# Produce a list of alternative locations #
###########################################
# Generate the alternative locations
alternativeLocations <- generateAlternativeLocations(axisLimits)
# Calculate the distance between the actual and alternative points - rescale X axis remove axis range bias
distances <- euclideanDistancesWithRescaledXAxis(pointInfo, alternativeLocations, axisLimits)
###############################################################
# Create a list to store the information about plotted points #
###############################################################
# Initialise the list to store the information about plotted labels
plottedPointInfo <- list("X"=c(), "Y"=c(), "Height"=c(), "Width"=c(), "N"=0)
##############################################################
# Add labels to plot assigning new locations where necessary #
##############################################################
# Plot the point label
for(i in seq_len(pointInfo$N)){
# Set the line characteristics
lineColour <- setOption(options=col.line, index=i)
lineType <- setOption(options=lty, index=i)
lineWidth <- setOption(options=lwd, index=i)
# Get the information for the current point
x <- pointInfo$X[i]
y <- pointInfo$Y[i]
height <- pointInfo$Heights[i]
width <- pointInfo$Widths[i]
# Get a new location
newLocationIndex <- chooseNewLocation(pointInfo, i, alternativeLocations, distances,
plottedPointInfo, axisLimits, keepInside)
# Is the current point too close to others?
if(alternativeLocations$N != 0 && newLocationIndex != -1 &&
(tooClose(x, y, height, width, plottedPointInfo) ||
outsidePlot(x, y, height, width, axisLimits))){
# Get the coordinates for the chosen alternate location
altX <- alternativeLocations$X[newLocationIndex]
altY <- alternativeLocations$Y[newLocationIndex]
# Add line back to previous location - from the outside of the circle
points(x=c(altX, x), y=c(altY, y), type="l", col=col.line, lty=lty, lwd=lwd, xpd=TRUE)
# Add point
points(x=altX, y=altY, cex=cex, ...)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=altX, y=altY, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
# Remove the alternative plotting location used
alternativeLocations$X <- alternativeLocations$X[-newLocationIndex]
alternativeLocations$Y <- alternativeLocations$Y[-newLocationIndex]
alternativeLocations$N <- alternativeLocations$N - 1
distances <- distances[, -newLocationIndex]
}else{
# Add point
points(x=x, y=y, cex=cex, ...)
# Append the plotted point information
plottedPointInfo <- addPlottedLabel(x=x, y=y, height=height, width=width,
plottedLabelInfo=plottedPointInfo)
}
}
#####################################################################################
# Return axes logged flags to original state - for if person makes any future plots #
#####################################################################################
par(xlog=xAxisLogged)
par(ylog=yAxisLogged)
}
plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
addPoints(coords$X, coords$Y, cex=3, col=rgb(0,0,0, 0.5), col.line="red")
plot(x=coords$X, y=coords$Y, pch=19, bty="n", xaxt="n", yaxt="n", cex=3, col=rgb(0,0,0, 0.5), xlab="X", ylab="Y")
plot(x=coords$X, y=coords$Y, bty="n", xaxt="n", yaxt="n", cex=3, xlab="X", ylab="Y")
plot(x=NULL, y=NULL, xlim=range(coords$X), ylim=range(coords$Y), bty="n", xaxt="n", yaxt="n", xlab="X", ylab="Y")
addPoints(coords$X, coords$Y, cex=3, col.line="red")
library("devtools")
library("roxygen2")
packageDirectory <- "/home/josephcrispell/Desktop/Research/basicPlotteR/"
setwd(packageDirectory)
document()
