# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
# Badgers to cattle
points(x=c(i-0.1, i-0.1), y=c(modelInterSpeciesRatioLower[i], modelInterSpeciesRatioUpper[i]), type="l",
col=rgb(0,0,0, 0.9))
points(x=i-0.1, y=modelInterSpeciesRatioMedians[i], pch=19, col=rgb(1,0,0, 0.75))
}
length(analyses)
modelInterSpeciesRatioLower
# Get the analyses names
analyses <- names(migrationRateEstimates)
names <- c()
# # Get the AICM values
# aicmScores <- c()
# shortenedNames <- c()
# for(i in 1:length(analyses)){
#   aicmScores[i] <- migrationRateEstimates[[analyses[i]]][["AICM"]][1]
#
#   parts <- strsplit(analyses[i], split="_")[[1]]
#   shortenedNames[i] <- paste(parts[1], parts[2], sep="_")
# }
# # Convert the AICM scores into weights
# # Exponential penalises those that are bad
# # Flips the score
# modelAICMWeights <- exp((min(aicmScores) - aicmScores)/2)
#
# # Normalise the AICM weights
# normalisedModelAICMWeights <- modelAICMWeights / sum(modelAICMWeights)
#
# # Initialise two arrays to store samples of the posterior sums from each model - sample size relative to AICM weight
# badgerToCowRatePosteriorSumSamples<- c()
# cowToBadgerRatePosteriorSumSamples <- c()
# Initialise vectors to store the median and range of the total rates between cattle and badgers
modelBadgerToCowRateMedians <- c()
modelBadgerToCowRateLower <- c()
modelBadgerToCowRateUpper <- c()
modelCowToBadgerRateMedians <- c()
modelCowToBadgerRateLower <- c()
modelCowToBadgerRateUpper <- c()
# Initialise vectors to summarise the distribution ratio: badger-to-cattle / cattle-to-cattle
modelInterSpeciesRatioMedians <- c()
modelInterSpeciesRatioLower <- c()
modelInterSpeciesRatioUpper <- c()
# Initialise a vectors to store the mean of the rate flags
modelBadgerToCowFlagMeans <- c()
modelCowToBadgerFlagMeans <- c()
# Examine each of the different model structures
for(i in 1:length(analyses)){
# Initialise arrays to store the rates from badgers to cattle and vice versa
sumRatesBadgerToCow <- rep(0, length(migrationRateEstimates[[analyses[i]]][[1]]))
sumRatesCowToBadger <- rep(0, length(migrationRateEstimates[[analyses[i]]][[1]]))
# Initialise arrays to store the rate flags from badgers to cattle and vice versa
sumFlagsBadgerToCow <- rep(0, length(migrationRateEstimates[[analyses[i]]][[1]]))
sumFlagsCowToBadger <- rep(0, length(migrationRateEstimates[[analyses[i]]][[1]]))
# Initialise counts for the number of badger-to-cow and cow-to-badger rates for the current model
nBadgerToCow <- 0
nCowToBadger <- 0
# Get the demeStructure
parts <- strsplit(analyses[i], "_")[[1]]
demeStructure <- parts[1]
names[i] <- paste(parts[c(1,2)], collapse="_")
# Examine each rate
for(key in names(migrationRateEstimates[[analyses[i]]])){
# Ignore AICM and zero rates (rates never estimate e.g. outer-cattle -> inner-badger)
if(key == "AICM"){
next
}
# Get the migration rate values
values <- migrationRateEstimates[[analyses[i]]][[key]]
# Create the flags (1 when values not NA, 0 otherwise)
flags <- ifelse(is.na(values), 0, 1)
# Replace the NA values with zero - so they aren't carried into the sums
values[is.na(values)] <- 0
# Split the key into its deme numbers
demeNumbers <- as.numeric(strsplit(key, split="_")[[1]])
# Check if current rate is between badger and cattle populations
if(grepl(getDemeNamesForDemeStructure(demeStructure, demeNumbers[1]),
pattern="badger") == TRUE &&
grepl(getDemeNamesForDemeStructure(demeStructure, demeNumbers[2]),
pattern="cow") == TRUE){
# Increment the count
nBadgerToCow <- nBadgerToCow + 1
# Add the flags for the current rate to the growing sum
sumFlagsBadgerToCow <- sumFlagsBadgerToCow + flags
# Add the current rate estimates to the growing sum
sumRatesBadgerToCow <- sumRatesBadgerToCow + values
}else if(grepl(getDemeNamesForDemeStructure(demeStructure, demeNumbers[1]),
pattern="cow") == TRUE &&
grepl(getDemeNamesForDemeStructure(demeStructure, demeNumbers[2]),
pattern="badger") == TRUE){
# Increment the count
nCowToBadger <- nCowToBadger + 1
# Add the flags for the current rate to the growing sum
sumFlagsCowToBadger <- sumFlagsCowToBadger + flags
# Add the current rate estimates to the growing sum
sumRatesCowToBadger <- sumRatesCowToBadger + values
}
}
# Calculate the ratio of the inter-species rate sums
interSpeciesTransitionRateRatio <- sumRatesBadgerToCow / sumRatesCowToBadger
interSpeciesTransitionRateRatio <- interSpeciesTransitionRateRatio[interSpeciesTransitionRateRatio != Inf]
modelInterSpeciesRatioMedians[i] <- median(interSpeciesTransitionRateRatio)
quantiles <- quantile(interSpeciesTransitionRateRatio, probs=c(0.025, 0.975))
modelInterSpeciesRatioLower[i] <- quantiles[[1]]
modelInterSpeciesRatioUpper[i] <- quantiles[[2]]
# Remove any values that are exactly zero
# - These will result when flag=0 across badger-to-cattle/cattle-to-badger rates estimate
sumRatesBadgerToCow <- sumRatesBadgerToCow[sumRatesBadgerToCow != 0]
sumRatesCowToBadger <- sumRatesCowToBadger[sumRatesCowToBadger != 0]
# Store summary statistics of these posterior sums
modelBadgerToCowRateMedians[i] <- median(sumRatesBadgerToCow)
quantiles <- quantile(sumRatesBadgerToCow, probs=c(0.025, 0.975))
modelBadgerToCowRateLower[i] <- quantiles[[1]]
modelBadgerToCowRateUpper[i] <- quantiles[[2]]
modelCowToBadgerRateMedians[i] <- median(sumRatesCowToBadger)
quantiles <- quantile(sumRatesCowToBadger, probs=c(0.025, 0.975))
modelCowToBadgerRateLower[i] <- quantiles[[1]]
modelCowToBadgerRateUpper[i] <- quantiles[[2]]
# Sample from these posterior sums in proportion to the current analyses AIC weight
# badgerToCowRatePosteriorSumSamples <-
#   c(badgerToCowRatePosteriorSumSamples,
#     sample(sumRatesBadgerToCow, size=round(normalisedModelAICMWeights[i] * length(sumRatesBadgerToCow), digits=0)))
# cowToBadgerRatePosteriorSumSamples <-
#   c(cowToBadgerRatePosteriorSumSamples,
#     sample(sumRatesCowToBadger, size=round(normalisedModelAICMWeights[i] * length(sumRatesCowToBadger), digits=0)))
# Divide the sums of the flags by the number of rates
flagsBadgerToCow <- sumFlagsBadgerToCow / nBadgerToCow
flagsCowToBadger <- sumFlagsCowToBadger / nCowToBadger
# Store summary statistics of these posterior sums
modelBadgerToCowFlagMeans[i] <- mean(flagsBadgerToCow)
modelCowToBadgerFlagMeans[i] <- mean(flagsCowToBadger)
}
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioUpper)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
axis(side=2, at=round(seq(yLim[1], maxValue, by=maxValue/4), digits=2), las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
# Badgers to cattle
points(x=c(i-0.1, i-0.1), y=c(modelInterSpeciesRatioLower[i], modelInterSpeciesRatioUpper[i]), type="l",
col=rgb(0,0,0, 0.9))
points(x=i-0.1, y=modelInterSpeciesRatioMedians[i], pch=19, col=rgb(0,0,0, 1))
}
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioUpper)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25, log="y")
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(log(modelInterSpeciesRatioUpper))
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25, log="y")
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(log(modelInterSpeciesRatioUpper))
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/4), digits=2)
axis(side=2, at=log(at), labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
at
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioUpper)
yLim <- c(0, log(maxValue) + (0.2 * log(maxValue)))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/4), digits=2)
axis(side=2, at=log(at), labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
at
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits)
axis(side=2, at=log(at), labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits=0)
axis(side=2, at=log(at), labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
# Badgers to cattle
points(x=c(i-0.1, i-0.1), y=log(c(modelInterSpeciesRatioLower[i], modelInterSpeciesRatioUpper[i])),
type="l", col=rgb(0,0,0, 0.9))
points(x=i-0.1, y=log(modelInterSpeciesRatioMedians[i]), pch=19, col=rgb(0,0,0, 1))
}
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits=0)
axis(side=2, at=log(at), labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
# Badgers to cattle
points(x=c(i-0.1, i-0.1), y=log(c(modelInterSpeciesRatioLower[i], modelInterSpeciesRatioUpper[i])),
type="l", col=rgb(0,0,0, 0.9), xpd=TRUE)
points(x=i-0.1, y=log(modelInterSpeciesRatioMedians[i]), pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
}
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "Cattle-to-Badgers"), text.col=c("red", "blue"), bty="n")
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioUpper)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, 100), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
yLim <- c(0,100)
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
# Badgers to cattle
points(x=c(i-0.1, i-0.1), y=c(modelInterSpeciesRatioLower[i], modelInterSpeciesRatioUpper[i]),
type="l", col=rgb(0,0,0, 0.9), xpd=TRUE)
points(x=i-0.1, y=modelInterSpeciesRatioMedians[i], pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
}
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue, by=maxValue/10), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
points(x=i-0.1, y=modelInterSpeciesRatioMedians[i], pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
}
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "Cattle-to-Badgers"), text.col=c("red", "blue"), bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
maxValue
at <- round(seq(yLim[1], maxValue, by=floor(maxValue/4)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
for(i in 1:length(analyses)){
points(x=i-0.1, y=modelInterSpeciesRatioMedians[i], pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
}
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "Cattle-to-Badgers"), text.col=c("red", "blue"), bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "-----------------", "Cattle-to-Badgers"),
text.col="black", bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "-------------------------------", "Cattle-to-Badgers"),
text.col="black", bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "--------------------------", "Cattle-to-Badgers"),
text.col="black", bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio: B->C / C->B", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "-------------------------", "Cattle-to-Badgers"),
text.col="black", bty="n")
# Add a plot label
mtext("c", side=3, line=1, at=axisLimits[1] - (0.1 * (axisLimits[2] - axisLimits[1])), cex=2.5)
# Get and set the margins
currentMar <- par("mar")
par(mar=c(17, 5.5, 5, 0.5)) # bottom, left, top, right
# Set the Y axis limits - leave space for flag estimates
maxValue <- max(modelInterSpeciesRatioMedians)
yLim <- c(0, maxValue + (0.2 * maxValue))
# Create the initial empty plot
plot(x=NULL, y=NULL, xlim=c(1, length(analyses)), # remove the +1 to remove space for weighted estimate
ylim=yLim, yaxt="n", ylab="", main="Estimated inter-species transition ratio",
las=1, xaxt="n", xlab="", bty="n", cex.lab=2, cex.main=2, cex.axis=1.25)
# Add the Y axis
at <- round(seq(yLim[1], maxValue + floor(maxValue/5), by=floor(maxValue/5)), digits=0)
axis(side=2, at=at, labels=at, las=1)
mtext(side=2, text="Median ratio", line=3.5, cex=1.25)
# Get the axis limits
axisLimits <- par("usr")
# Add summaries for the ratio from each analyses
points(x=1:length(analyses), y=modelInterSpeciesRatioMedians, pch=19, col=rgb(0,0,0, 1), xpd=TRUE)
# Axis
axis(side=1, at=1:length(analyses), labels=names, las=2, cex.axis=1.25)
legend("top", legend=c("Badgers-to-Cattle", "-------------------------", "Cattle-to-Badgers"),
text.col="black", bty="n")
library("devtools")
library("roxygen2")
packageDirectory <- "/home/josephcrispell/Desktop/Research/plotteR/"
setwd(packageDirectory)
document()
setwd(packageDirectory)
document()
devtools::install_github("JosephCrispell/plotteR")
library(plotteR)
?progress
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
# Set the number of iterations of the for loop
n <- 1000
for(i in 1:n){
# Sleep for a tenth of a second
Sys.sleep(0.01)
# Update the progress bar
progress(i, n)
}
