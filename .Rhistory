if(demeStructure == "4DemeCumbria"){
plotDemesAndMigrationRates(migrationRates, code)
}else{
cat(paste("Input deme structure not recognised:", demeStructure, "\n"))
}
return(output)
}
createEmptyPlot <- function(){
par(mar=c(0,0,0,0))
plot(x=NULL, y=NULL, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", bty="n",
ylab="", xlab="")
}
plotDemesAndMigrationRates <- function(arrowWeights, code=2){
demeStructure <- "4DemeCumbria"
# Create empty plot
createEmptyPlot()
# Get deme names and assign colours
demeNames <- getDemeNamesForDemeStructure(demeStructure)
demeColours <- rep("black", length(demeNames))
demeColours[grepl(demeNames, pattern="badger")] <- "red"
demeColours[grepl(demeNames, pattern="cow")] <- "blue"
# Note the x and y positions
x <- c(0.1, 0.9, 0.1, 0.9)
y <- c(0.9, 0.9, 0.1, 0.1)
# Add labels
text(x=x, y=y,
labels=demeNames, col=demeColours)
## Cumbria
# badger -> cow
if(arrowWeights[["0_2"]] != 0){
arrows(x0=x[1]+0.05, x1=x[3]+0.05, y0=y[1]-0.1, y1=y[3]+0.1,
code=code, lwd=arrowWeights[["0_2"]])
}
# cow -> badger
if(arrowWeights[["2_0"]] != 0){
arrows(x0=x[3]-0.05, x1=x[1]-0.05, y0=y[3]+0.1, y1=y[1]-0.1,
code=code, lwd=arrowWeights[["2_0"]])
}
## TVR
# badger -> cow
if(arrowWeights[["1_3"]] != 0){
arrows(x0=x[2]-0.05, x1=x[4]-0.05, y0=y[2]-0.1, y1=y[4]+0.1,
code=code, lwd=arrowWeights[["1_3"]])
}
# cow -> badger
if(arrowWeights[["3_1"]] != 0){
arrows(x0=x[4]+0.05, x1=x[2]+0.05, y0=y[4]+0.1, y1=y[2]-0.1,
code=code, lwd=arrowWeights[["3_1"]])
}
## TVR -> Cumbria
if(arrowWeights[["3_2"]] != 0){
arrows(x0=x[4]-0.1, x1=x[3]+0.1, y0=y[4], y1=y[3],
code=code, lwd=arrowWeights[["3_2"]])
}
}
timesValuesInListByValue <- function(list, value){
output <- list()
for(key in names(list)){
output[[key]] <- list[[key]] * value
}
return(output)
}
divideValuesInListByMax <- function(arrowRates){
max <- max(unlist(arrowRates), na.rm=TRUE)
output <- timesValuesInListByValue(arrowRates, 1/max)
return(output)
}
getArrowRates <- function(logTable){
# Initialise a list to store the arrow weights
arrowRates <- list()
# Get the column names
colNames <- colnames(logTable)
# Examine each column
for(col in colNames){
# Ignore all columns except the forward rate columns
if(grepl(x=col, pattern="forward") == FALSE){
next
}
# Skip rate if never estimate e.d. cattle-outer -> badger-inner
if(length(unique(logTable[, col])) <= 2){
next
}
# Get the directional information (i.e. 0_1, 2_0)
parts <- strsplit(col, split="_")[[1]]
direction <- paste(parts[length(parts) - 1], "_", parts[length(parts)], sep="")
# Store a summary statistic for the rate distribution
arrowRates[[direction]] <- logTable[, col]
}
return(arrowRates)
}
examineSubstitutionRateEstimates <- function(logTable, genomeSize){
# Get the substitution rate estimates note that stored differently between strict and relaxed
rateEstimates <- c()
if(length(which(grepl(colnames(logTable), pattern="mutationRate") == TRUE)) == 1){
rateEstimates <- logTable$mutationRate
}else{
rateEstimates <- logTable$ucedMean
}
# Define a colour palette based upon the likelihood
rbPal <- colorRampPalette(c('red','blue'))
colours <- rbPal(10)[as.numeric(cut(logTable$posterior,breaks = 10))]
colours <- sapply(head(colours), setAlpha, alpha=0.5, simplify=TRUE)
# Plot the substitution rate distribution versus the root height
plot(x=rateEstimates * genomeSize, y=logTable$tree.height, pch=20,
xlab="Substitution Rate (per Genome per Year)", ylab="Root Height (years)",
main="Substitution Rate versus Root Height",
col=colours, las=1, bty="n")
legend("topright", legend=c("High", "Low"), pch=20, col=c("red", "blue"),
bty="n")
}
plotPopulationSizes <- function(logTable, demeStructure, alpha=0.5){
# Get the population size distributions
popSizeEstimates <- list()
for(col in colnames(logTable)){
if(grepl(col, pattern="popSize") == FALSE){
next
}
popSizeEstimates[[strsplit(col, split="_")[[1]][2]]] <- logTable[, col]
}
# Get the deme names
demeNames <- getDemeNamesForDemeStructure(demeStructure)
# Define the limits of the population sizes and histogram breaks
values <- c()
for(key in names(popSizeEstimates)){
values <- c(values, popSizeEstimates[[key]])
}
xLim <- range(values)
breaks <- seq(from=xLim[1], to=xLim[2] + 5, by=5)
# Create a histogram object for each distribution of sizes
histograms <- list()
for(key in names(popSizeEstimates)){
histograms[[key]] <- hist(popSizeEstimates[[key]], plot=FALSE, breaks=breaks)
}
# Get the y axis limits
counts <- c()
for(key in names(histograms)){
counts <- c(counts, histograms[[key]]$counts)
}
yLim <- c(0, max(counts))
# Create a vector of colours
colours <- c("red", "blue", "green", "cyan", "orange", "darkorchid4", "deeppink", "black", "brown", "darkolivegreen")
# Plot the histograms
keys <- names(histograms)
for(i in 1:length(keys)){
if(i == 1){
plot(histograms[[keys[i]]],
col=setAlpha(colours[i], alpha), las=1,
main="Deme Effective Population Sizes", xlab="Effective Size",
ylim=yLim, xlim=xLim)
}else{
plot(histograms[[keys[i]]], col=setAlpha(colours[i], alpha), add=TRUE)
}
}
# Add legend
legend("topright", legend=demeNames, bty="n",
text.col=colours)
}
plotParameterESSValues <- function(logTable, colNamesToPlot){
essValues <- rep(NA, length(colNamesToPlot))
for(i in 1:length(colNamesToPlot)){
# Get the posterior values from the current column
values <- as.numeric(logTable[, colNamesToPlot[i]])
# Remove transition rate values when rate flag is set to zero
if(grepl(colNamesToPlot[i], pattern="migModel.rateMatrix") == TRUE){
# Get the deme numbers
parts = strsplit(colNamesToPlot[i], split="_")[[1]]
a <- parts[2]
b <- parts[3]
# Build the rate Flag column name
flagCol <- paste("migModel.rateMatrixFlag_", a, "_", b, sep="")
# Remove values where rate flag == 0
values <- values[logTable[, flagCol] != 0]
}
# Remove NAs, if present
values <- values[is.na(values) == FALSE]
# Note and skip those where the value is always the same
range <- range(values)
if(range[1] == range[2]){
#cat(paste("Parameter \"", colNamesToPlot[i],
#          "\" always has single value: ", range[1], "\n", sep=""))
next
}
if(length(essValues) > 1){
essValues[i] <- calculateEffectiveSampleSize(values)
}else{
essValues[i] <- length(essValues[i])
}
}
# Set the margins
par(mar=c(0,11,2,0.5)) # bottom, left, top, right
barplot(essValues, las=1, names=colNamesToPlot, horiz=TRUE, xaxt="n", cex.names=0.3,
main="Parameter Effective Sample Sizes")
abline(v=100, lty=2, col="red")
abline(v=1000, lty=2, col="blue")
text(x=c(250, 1200), y=c(0, 0), labels=c("100", "1000"), cex=0.5, col=c("red", "blue"))
# Reset Margins
par(mar=c(5.1, 4.1, 4.1, 2.1))
}
readInBASTALogTables <- function(date, demeStructures, popEstimationTypes,
clockEstimateTypes, path, nReplicates,
burnInProp=0.1, ignoreIfFlagged=FALSE){
# Store each of the log tables in a list
logTables <- list()
# Loop through the deme structures
for(demeStructure in names(demeStructures)){
# Loop through the population structures
for(popEstimationType in popEstimationTypes){
# Loop through the clock models
for(clockEstimationType in clockEstimateTypes){
# Initilialise a list to store the log tables for the current run's replicates
logTablesForReplicates <- list()
# Retrieve the data from each replicate
for(replicate in 1:nReplicates){
# Build run defining prefix
prefix <- paste(demeStructure, "_", popEstimationType, "_",
clockEstimationType, "_", replicate, "_", date, sep="")
# Print progress information
cat(paste("\rReading: ", prefix, ".log\tReplicate: ", replicate,
"\t\t\t\t\t", sep=""))
# Create file name
file <- paste(path, "Replicate", replicate, "_", date, "/",
prefix, "/", prefix, ".log", sep="")
# Read in the file as table
logTable <- read.table(file, header=TRUE, sep="\t", stringsAsFactors=FALSE)
# Replace "N" in table with NAs
logTable[logTable == "N"] <- NA
# Remove the burn-in
burnIn <- round(burnInProp * nrow(logTable), digits=0)
logTable <- logTable[burnIn:nrow(logTable), ]
# Calculate the forward rates
logTable <- calculateForwardMigrationRates(logTable)
# Store the logTable
logTables[[prefix]] <- logTable
}
}
}
}
cat("\rFinished reading in log tables...\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n")
return(logTables)
}
calculateForwardMigrationRates <- function(logTable){
# Get the names of the backward in time migration rate estimates
migrationRateCols <- colnames(logTable)[
grepl(colnames(logTable), pattern = "migModel.rateMatrix_")]
# For each backward in time migration rate calculate the forward migration rate
# FMR_ab = BMR_ba * (Nb / Na)
#   MR: Migration rate (F - Forward, B - Backward)
#   N: Effective population size
#   Demes: a, b
# Equation taken from second paragraph of Methods section in:
# De Maio et al. 2015 - New routes to phylogeography ...
#   BMR_ba = FMR_ab * (Na / Nb)
#   ->  FMR_ab = BMR_ba / (Na / Nb)
#     ->  FMR_ab = BMR_ba * (Nb / Na)
#
### NOTE: Backward rates are multiplied by rate flag before being used ###
# - Converts estimates to 0 when flag = 0 (i.e. rate turned off). If rate isn't likely, then they'll be a lot of zeros that will drag down estimate
# - Set to NA when flag = 0
for(backwardMigrationRateCol in migrationRateCols){
# Get the demes involved
parts <- strsplit(backwardMigrationRateCol, split="_")[[1]]
a <- parts[2]
b <- parts[3]
#### Multiply the backward rates by the rate flag column ####
backwardRate <- logTable[, backwardMigrationRateCol] * logTable[, paste("migModel.rateMatrixFlag_", a, "_", b, sep="")]
# Get the estimate population sizes for a and b
popASizes <- logTable[, paste("migModel.popSize_", a, sep="")]
popBSizes <- logTable[, paste("migModel.popSize_", b, sep="")]
# Calculate forward rate
forwardMigrationRateCol <- paste("migModel.forwardRateMatrix_", b, "_", a, sep="")
logTable[, forwardMigrationRateCol] <- backwardRate * (popASizes/popBSizes)
# Convert the rates to NAs when flag set to zero
logTable[, forwardMigrationRateCol][logTable[, paste("migModel.rateMatrixFlag_", a, "_", b, sep="")] == 0] <- NA
}
return(logTable)
}
getNSitesInFASTA <- function(fastaFile){
# Open a connection to a file to read (open="r")
connection <- file(fastaFile, open="r")
# Get first line of file
firstLine <- readLines(connection, n=1)
# Close file connection
close(connection)
# Get the number of sites used in the FASTA file from first line
nSites <- as.numeric(strsplit(firstLine, " ")[[1]][2])
return(nSites)
}
getConstantSiteCounts <- function(constantSiteCountsFile){
# Open the file and store the file lines
connection <- file(constantSiteCountsFile, "r")
lines <- readLines(connection)
close(connection)
# Calculate the constant site counts
counts <- c(0,0,0,0)
for(line in lines){
# Skip lines without counts
if(grepl(line, pattern="Counts|A") == TRUE || line == ""){
next
}
# Split the line into its parts
parts <- strsplit(line, "\t")[[1]]
# Add the counts to the tally
counts <- counts + as.numeric(parts)
}
return(counts)
}
# Set the path
path <- "/home/josephcrispell/Desktop/Research/Cumbria/"
#### Note the Genome Size examined ####
# Get the constant site counts
constantSiteCountsFile <- paste(path, "TVR_vcfFiles/", "constantSiteCounts_29-03-2019.txt",
sep="")
constantSiteCounts <- getConstantSiteCounts(constantSiteCountsFile)
genomeSize <- sum(constantSiteCounts)
# Get number of sites used in FASTA file
fastaFile <- paste(path, "TVR_vcfFiles/", "sequences_Prox-10_29-03-2019.fasta", sep="")
nSites <- getNSitesInFASTA(fastaFile)
genomeSize <- genomeSize + nSites
#### Read in the log tables ####
# Move the path
path <- paste(path, "BASTA/", sep="")
# Note the date when all analyses were created
date <- "10-05-19"
# Note the deme structures that were used in the analyses
demeStructures <- list("4DemeCumbria"=4)
# Note the population size estimation options
popEstimationTypes <- c("varying", "equal")
# Note the clock model options
clockEstimateTypes <- c("relaxed") # strict not used
# Store each of the log tables in a list
logTables <- readInBASTALogTables(date, demeStructures, popEstimationTypes,
clockEstimateTypes, path, nReplicates=2)
#### Examine each run ####
# Create summary plots, note migration rates and calculate AICM scores for each model
nBootstraps <- 1000
migrationRateEstimates <- summarisePosteriorLogTables(path, logTables, code=2,
arrowFactor=20, nBootstraps,
genomeSize, date)
names(migrationRateEstimates)
head(migrationRateEstimates$4`4DemeCumbria_equal_relaxed_1_10-05-19`)
head(migrationRateEstimates$`4DemeCumbria_equal_relaxed_1_10-05-19`)
names(migrationRateEstimates)
# Set the number of replicates
nReplicates <- 2
# Set the demeStructure
demeStructure <- names(demeStructures)[1]
replicate <- 1
# Construct the analysis file name
analysis <- paste0(demeStructure, "_", popType, "_relaxed_", replicate, "_", date)
popType <- "equal"
# Construct the analysis file name
analysis <- paste0(demeStructure, "_", popType, "_relaxed_", replicate, "_", date)
analysis
names(migrationRateEstimates[[analysis]])
migrationRateEstimates[[analysis]]$`2_0`
migrationRateEstimates[[analysis]]$`3_1`
migrationRateEstimates[[analysis]]$`0_2`
migrationRateEstimates[[analysis]]$`3_2`
migrationRateEstimates[[analysis]]$`1_3`
rate "1_3"
rate <- "1_3"
# Get the migration rate values
values <- migrationRateEstimates[[analysis]][[rate]]
head(values)
sum(ifelse(is.na(values), 0, 1)) / length(values)
# Estimate the flag proportion support
flagSupport <- sum(ifelse(is.na(values), 0, 1)) / length(values)
# Initialise vectors to store summary data for each analysis
medians <- c()
uppers <- c()
lowers <- c()
flags <- c()
names <- c()
index <- 0
# Set the demeStructure
demeStructure <- names(demeStructures)[1]
# Inter-species transmission rates
for(replicate in seq_len(nReplicates)){
# Loop through the population size types
for(popType in c("equal", "varying")){
# Construct the analysis file name
analysis <- paste0(demeStructure, "_", popType, "_relaxed_", replicate, "_", date)
# Examine each of the rates for the current model
for(rate in names(migrationRateEstimates[[analysis]])){
# Get the migration rate values
values <- migrationRateEstimates[[analysis]][[rate]]
# Estimate the flag proportion support
flagSupport <- sum(ifelse(is.na(values), 0, 1)) / length(values)
# Calculate median of the values
median <- median(values, na.rm=TRUE)
# Calculate the upper and lower bounds
quantiles <- quantile(values, probs=c(0.025, 0.975), na.rm=TRUE)
# Store all the values calculated
index <- index + 1
medians[index] <- median
uppers[index] <- quantiles[2]
lowers[index] <- quantiles[1]
flags[index] <- flagSupport
names[index] <- paste0(analysis, "_", rate)
}
}
}
medians
names
# Create an empty plot
plot(x=NULL, y=NULL, ylim=c(0, max(uppers)), xlim=c(0, length(names)))
# Create an empty plot
plot(x=NULL, y=NULL, ylim=c(0, max(uppers)), xlim=c(0, length(names)), bty="n")
medians
uppers
lowers
names[7]
analysis <- "4DemeCumbria_varying_relaxed_1_10-05-19"
rate "2_0"
rate <- "2_0"
values <- migrationRateEstimates[[analysis]][[rate]]
flagSupport <- sum(ifelse(is.na(values), 0, 1)) / length(values)
flagSupport
table(is.na(values))
hist(values)
# Calculate median of the values
median <- median(values, na.rm=TRUE)
median
quantiles <- quantile(values, probs=c(0.025, 0.975), na.rm=TRUE)
quantiles
quantiles[1]
quantiles[[1]]
# Initialise vectors to store summary data for each analysis
medians <- c()
uppers <- c()
lowers <- c()
flags <- c()
names <- c()
index <- 0
# Set the demeStructure
demeStructure <- names(demeStructures)[1]
# Inter-species transmission rates
for(replicate in seq_len(nReplicates)){
# Loop through the population size types
for(popType in c("equal", "varying")){
# Construct the analysis file name
analysis <- paste0(demeStructure, "_", popType, "_relaxed_", replicate, "_", date)
# Examine each of the rates for the current model
for(rate in names(migrationRateEstimates[[analysis]])){
# Get the migration rate values
values <- migrationRateEstimates[[analysis]][[rate]]
# Estimate the flag proportion support
flagSupport <- sum(ifelse(is.na(values), 0, 1)) / length(values)
# Calculate median of the values
median <- median(values, na.rm=TRUE)
# Calculate the upper and lower bounds
quantiles <- quantile(values, probs=c(0.025, 0.975), na.rm=TRUE)
# Store all the values calculated
index <- index + 1
medians[index] <- median
uppers[index] <- quantiles[2]
lowers[index] <- quantiles[1]
flags[index] <- flagSupport
names[index] <- paste0(analysis, "_", rate)
}
}
}
max(uppers)
uppers
uppers[6]
names[6]
# Initialise vectors to store summary data for each analysis
medians <- c()
uppers <- c()
lowers <- c()
flags <- c()
names <- c()
index <- 0
# Set the demeStructure
demeStructure <- names(demeStructures)[1]
# Inter-species transmission rates
for(replicate in seq_len(nReplicates)){
# Loop through the population size types
for(popType in c("equal", "varying")){
# Construct the analysis file name
analysis <- paste0(demeStructure, "_", popType, "_relaxed_", replicate, "_", date)
# Examine each of the rates for the current model
for(rate in names(migrationRateEstimates[[analysis]])){
# Ignore the AICM score
if(rate == "AICM"){
next
}
# Get the migration rate values
values <- migrationRateEstimates[[analysis]][[rate]]
# Estimate the flag proportion support
flagSupport <- sum(ifelse(is.na(values), 0, 1)) / length(values)
# Calculate median of the values
median <- median(values, na.rm=TRUE)
# Calculate the upper and lower bounds
quantiles <- quantile(values, probs=c(0.025, 0.975), na.rm=TRUE)
# Store all the values calculated
index <- index + 1
medians[index] <- median
uppers[index] <- quantiles[2]
lowers[index] <- quantiles[1]
flags[index] <- flagSupport
names[index] <- paste0(analysis, "_", rate)
}
}
}
max(uppers)
# Create an empty plot
plot(x=NULL, y=NULL, ylim=c(0, max(uppers)), xlim=c(0, length(names)), bty="n", las=1)
plot(x=NULL, y=NULL, ylim=c(0, max(uppers)), xlim=c(0, length(names)), bty="n", las=1,
xaxt="n", ylab="Per lineage transition rate per year")
plot(x=NULL, y=NULL, ylim=c(0, max(uppers)), xlim=c(0, length(names)), bty="n", las=1,
xaxt="n", ylab="Per lineage transition rate per year", xlab="")
